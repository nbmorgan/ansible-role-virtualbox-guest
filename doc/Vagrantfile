# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  #tell vargeant where to write host info for ansible
  ansible_inventory_dir = "ansible/hosts"

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "centos/7"
  config.vm.hostname = "dev-tools"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  config.vm.network "forwarded_port", guest: 80,   host: 7080
  config.vm.network "forwarded_port", guest: 443,  host: 7443
  config.vm.network "forwarded_port", guest: 8080, host: 7880

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
     vb.memory = "512"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.
 
  ## copy ansible playbooks
  #config.vm.provision "shell", inline: "rm -rf /vagrant/ansible" 
  #config.vm.provision "file", source: "./ansible", destination: "/vagrant/ansible"

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # 
  # Just insure ansible is present
  #config.vm.provision "shell", inline: <<-SHELL
  #  if  rpm -q  ansible 
  #  then
  #    echo ansible is installed
  #  else
  #    yum -y install epel-release
  #    yum -y install ansible
  #  fi 
  #SHELL

  # setup the ansible inventory file
  Dir.mkdir(ansible_inventory_dir) unless Dir.exist?(ansible_inventory_dir)
  File.open("#{ansible_inventory_dir}/vagrant" ,'w') do |f|
      f.write <<~"ANSIBLEINV"
        ---
        all:
          hosts:
              #{config.vm.hostname}:
                # I don't know enough ruby plus vagarnt inernals to make the following work
                #ansible_port: #{config.ssh.port}
                #ansible_host: #{config.ssh.host}
                # So I am hard coding this for now
                ansible_port: 2222
                ansible_host: 127.0.0.1
    ANSIBLEINV
  end 

  #config.vm.provision "ansible" do |ansible|
  #  ansible.verbose = "v"
  #  ansible.limit = "all"
  #  ansible.inventory_path = "#{ansible_inventory_dir}/vagrant"
  #  ansible.playbook = "ansible/playbook.yml" 
  #end
  
  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "../", "/dev_files"

end
# vim: noai:ts=2:sw=2:et:set filetype=ruby:expandtab
